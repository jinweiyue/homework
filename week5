ArrayList<Particle> particles;
ArrayList<PImage> img;
int n, s, maxR;
int indexImg = 0;

void setup() {
  size(800, 800);
  background(#FFEDDA);
  smooth();

  n = 1000;
  s = 20;
  maxR = height/2 - height/10;

  particles = new ArrayList<Particle>();

  img = new ArrayList<PImage>();

  img.add(loadImage("IMG_3421.jpg"));
}

void draw() {
  translate(width/2, height/2);
  noStroke();

  if (s > 1) {
    if (particles.size() != 0) {
      for (int i = 0; i < particles.size(); i++) {
        Particle p = particles.get(i);
        p.show();
        p.move();

        if (p.isDead()) particles.remove(i);
      }
    } else {
      s -= 2;
      initParticles();
    }
  }
}

void initParticles() {
  for (int i = 0; i < n; i++) {
    particles.add(new Particle(maxR, s));

    Particle p = particles.get(i);
    int x = int(map(p.pos.x, -maxR, maxR, 0, img.get(indexImg).width));
    int y = int(map(p.pos.y, -maxR, maxR, 0, img.get(indexImg).height));
    p.c = img.get(indexImg).get(x, y);
  }
}

void mousePressed() {
  indexImg = (indexImg + 1) % img.size();
  setup();
}
class Particle {
  PVector pos;
  PVector vel;
  int maxR;
  int s;
  int life;
  color c;
  float noisePower = 0.01;

  Particle(int maxR_, int s_) {
    s = s_;
    maxR = maxR_;
    life = 100;
    init();
  }

  void init() {
    pos = PVector.random2D();
    pos.normalize();
    pos.mult(random(2, maxR));
    vel = new PVector();
  }

  void show() {
    fill(c);
    ellipse(pos.x, pos.y, s, s);
    life -= 1;
  }

  void move() {
    float angle = noise(pos.x * noisePower, pos.y * noisePower) * TAU;
    vel.set(cos(angle), sin(angle));
    vel.mult(0.3);
    pos.add(vel);
  }

  boolean isDead() {
    float d = dist(pos.x, pos.y, 0, 0);
    if (d > maxR || life < 1) return true;
    else return false;
  }
}
